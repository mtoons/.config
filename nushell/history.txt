zd AppData\
z AppData\
z .\AppData\
clear
nvim
z AppData\
z local
z rust
something
nvim $nu.env-path
ijqspdfiijn
nvim $nu.config-path
nvim $STARSHIP_CONFIG
nvim STARSHIP_CONFIG
nvim $ENV:STARSHIP_CONFIG
cd  ~/.config;code starship.toml
exactly what i needed
moua ha ha
z rust
../
nvim $nu.config-path
ls
nvim $nu.config-path
nvim $nu.env-path
nvim $nu.config-path
rust
great
nvim
nvim
cargo install bat
ls
ls | table
ls | where type == "dir"
ls | where type == "dir" | where size > 0
ls | where type == "dir" | where filesize > 0
ls | where type == "dir" | where size > 0
ls | where type == "dir" | where size >= 0
ls | where size >= 0
ls | where size > 0
ls | where size > 0B
ls | where type == "dir" | where size > 0B
ls | where type == "dir" | where size > 0KiB
ls | where type == "dir" | where size > 4KiB
ps
ps | where cpu > 1
ps | where cpu > 0.1
ps | where cpu > 0.01
ps | where mem > 10MiB
ps | where mem > 100MiB
bat NTUSER.DAT
z rust
bat hello.rs
bat hello.rs | where line == 1
bat hello.rs | table
bat hello.rs
open hello.rs
grep
bat hello.rs | grep main
bat hello.rs | grep print
bat hello.rs | grep n
bat hello.rs | grep n | bat
hello.rs | grep n
open hello.rs | grep n
bat hello.rs | grep n
grep hello.rs n | bat
grep n hello.rs
grep n hello.rs | bat
grep n hello.rs | bat -l rust
grep } hello.rs | bat -l rust
grep \} hello.rs | bat -l rust
grep '}' hello.rs | bat -l rust
z rust |<\n>table
z rust | ls
z ../
z rustling
cargo install zellij
.\rustlings.exe watch
cat exercises\lifetimes\lifetimes2.rs
cat exercises\lifetimes\lifetimes2.rs -l rust
bat exercises\lifetimes\lifetimes2.rs
nvim
ping google.com
ping google.com | table
ping google.com | grep time
$nu.config-path
z $nu.config-path
z AppData\Roaming\nushell\
ls
zsh
ls
winget upgrade nushell
nushell -v
z nushell/
nvim env.nu
rm env.nu
rm config.nu
nvim env.nu
CARGO_HOME
$CARGO_HOME
$env.CARGO_HOME
CARGO_INSTALL_ROOT
cd CARGO_INSTALL_ROOT
$env.CARGO_HOME
cd $env.CARGO_HOME
nvim $nu.env-path
nvim $nu.config-path
ls
sudo ls
ls
../
ls
cd usr/
ls
cd bin
ls
cd bin | grep crates
ls
ls | grep nu
ls | grep nushell
ls | grep cargo
ls | grep create
../
ls
../
ls
cd home/
ls
cd angel
ls
../
cd root
sudo cd root
sudo
sudo cd root
which nu
which nu | copy
which shell
cd shell
nvim shell
pwsh
which shell
which nu
nvim ~/.zshrc
ls
ls
.config
ls
../
ls
ls | grep config
ls
z .config
ls
rm starship.toml
ln -s /mnt/c/Users/Angel/.config/starship.toml ./starship.toml
ls
./nvim
ls
nvim init.lua
../
rm -rf nvim
ln -s /mnt/c/Users/Angel/AppData/Local/nvim/ ./nvim/
ln -s /mnt/c/Users/Angel/AppData/Local/nvim/ ./nvim
ls
nvim
ping google.com
neovide --wsl
neovide
clear
cargo install zellij
cargo install zellij
open-ssl
winget install libssl-dev
winget install -e --id ShiningLight.OpenSSL
winget upgrade treesize
winget install treesize.free
winget install -e --id JAMSoftware.TreeSize.Free
clear
winget install -e --id Nilesoft.Shell
where shell
shell
where shell
shell
z program
z "Program Files"
z `C:\Program Files\`
z `Nilesoft Shell\`
nvim
zellij
theme
nvim $nu.config-path
use dark
.config
ls
../
cd $nu.config-path
cd $nu.config
cd $nu.config-path
cd $nu.config-path/../
cd $nu.config-path/..
cd $nu.config-path/../
cd $nu.config-path/../.
cd $nu.config-path/../?
cd $nu.config-path/...
cd $nu.config-path/..?
z appdata
z Roaming\
ls
z nushell\
ls
$env.color_config
z $nu.config
z $env.config
mkdir themes
ln -help
ln --help
copy
cp
cp --help
cp C:\Users\Angel\Downloads\catppuccin-mocha.nu .\themes\
z themes
ls
use catppuccin-mocha.nu 
so
just like that ?
ls
$env.config = ($env.config | merge {color_config: (catppuccin-mocha)})$env.config = ($env.config | merge {color_config: (dracula)})
$env.config = ($env.config | merge {color_config: (catppuccin-mocha)})
ls
use ./themes/nu-themes/dracula.nu
use ./themes/nu-themes/catppuccin-mocha.nu
cargo install zellij
ls
use C:\Users\Angel\AppData\Roaming\nushell\themes\catppuccin-mocha.nu
$env.config = ($env.config | merge {color_config: (catppuccin-mocha)})
ls
rm `Voisinage d'impression\`
rm `Voisinage r√©seau\`
rm SendTo\
ls
nvim $nu.config-path
7zip
zip
zip --help
ls
z ansel
ls
rmdir
z ../
rmdir ansel
ls
ls go
ls go/pkg
ls
ls cursors
ls
ls source
ls source repos
ls source\repos\
rm -rf source
ls
zellij
clear
cargo install zellij
cargo -help
cargo install zellij | grep tokyo
pwsh
something
ls
zellij
/
z root
sudo
sudo cd root
cd -s root
/
cd run
ls
/
ls
cd dev
ls
/
ls
cd bin
ls
/
cd sbin
ls
/
ls
cargo install --locked zellij
z snap
ls
snap -h
snap refresh
sudo snap refresh
/
ls
z srv
ls
/
ls
z sys
ls
/
ls
z usr
ls
z bin
ls
../
ls
cd games
ls
../
ls
z include
ls
../
ls
z local/
ls
bin
z bin
ls
../../
~
ls
cargo install ntapi
cargo add ntapi
ls
cargo install --git https://github.com/zellij-org/zellij avm --force
cargo install --git https://github.com/zellij-org/zellij --force
neovide --wsl
nvim .bash_profile
rm .bash_profile
which nvim
neovide --wsl
which nvim
where nvim
which nvim
/snap/bin
ls
~
nvim
nvim .bashrc
nvim .profile
neovide --wsl
wsl '$SHELL' -lc 'which nvim'
nvim $SHELL
nvim $en.SHELL
nvim $env.SHELL
cargo install --git https://github.com/zellij-org/zellij zellij --force
nvim .zshrc
chsh
/
ls
cd bin
ls
ls | grep bash
chsh
neovide --wsl
nvim .zshrc
which zoxide
ls
nvim .profile
nvim .bashrc
z rustlings
z OneDrive/
z Bureau/programmes/rust/rustlings/
ls
.rustlings.exe
rustlings.exe
z c
z /mnt/c
z Users/Angel/Documents/
z local_programmes/
ls
z mach-glfw-vulkan-example-main/
zig build
clear
zellij
ls
nvim .bashrc
nvim .profile
ls -a
cd snap
ls
~
ls -a
cd libsz
cd libs
ls
zig build
z downloads
ls
ls | grep sfml
ls | grep SFML
7za --help
7za -help
z downloads
7z
7z x SFML-master.zip C:\Users\Angel\Desktop\
7z x SFML-master.zip ..\Desktop\
7z e SFML-master.zip
7z e SFML-master.zip SFML
7z e SFML-master.zip SFML\
z Desktop\
z kickstart.nvim-master\
../
z SFML-master\
ls
cmake -S . -B ./build -G "MinGW Makefiles" -DCMAKE_C_COMPILER="zig cc" -DCMAKE_CXX_COMPILER="zig c++"
cmake -S . -B ./build -G "MinGW Makefiles" -DCMAKE_C_COMPILER= "zig cc" -DCMAKE_CXX_COMPILER= "zig c++"
cmake -S . -B ./build -G "MinGW Makefiles" -DCMAKE_C_COMPILER="zig cc" -DCMAKE_CXX_COMPILER="zig c++"
CC="zig cc" CXX="zig c++" cmake -S . -B ./build -G "MinGW Makefiles"
CC="zig cc" CXX="zig c++" cmake -S . -B ./build -G "MinGW Makefiles" -Wno-dev
CC="zig\ cc" CXX="zig\ c++" cmake -S . -B ./build -G "MinGW Makefiles"
CC="zig cc -target x86_64-windows" CXX="zig c++ -target x86_64-windows" cmake -S . -B ./build -G "MinGW Makefiles"
CC="zig cc -target x86_64-windows" CXX="zig c++ -target x86_64-windows" cmake -S . -B ./build -G "Unix Makefiles"
z sfml-master
z SFML-mas
ls
z Desktop\SFML-master\
CC="zig cc -target x86_64-windows" CXX="zig c++ -target x86_64-windows" cmake -S . -B ./build -G "MinGW Makefiles"
cd build
make install
zig build
zig build -target x86_64-windows
zig build -Dtarget=x86_64-windows
zig build
zig build -OReleaseFast
zig build -h
zig build -DOptimize=ReleaseFast
zig build -Doptimize=ReleaseFast
zig build -Doptimize=ReleaseFast -Dtarget=x86_64-windows
zig build sfml
zig build_sfml
zig build build_sfml
z Desktop\SFML-master\
CC="zig cc -target x86_64-windows" CXX="zig c++ -target x86_64-windows" cmake -S . -B ./build -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DSFML_USE_STATIC_STD_LIBS=true
cd build
make install
zig build -Doptimize=ReleaseFast -Dtarget=x86_64-windows
zig build
z sf
z SFML-mas
z SFML-master
z Desktop\SFML-master\
CC="zig cc -target x86_64-windows" CXX="zig c++ -target x86_64-windows" cmake -S . -B ./build -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=true
cd build
make install
zig zen
zig build
zig init
zig build
hx
.config
$.env.HOME
clang-format
clang-format --help
clangd
clangd --help
clangd | grep style
clangd --help | grep style
clangd -help
clangd -help | grep style
clangd --fallback-style=$HOME/.config/.clang-format
man atoi
man
wget https://mercury.picoctf.net/static/fb851c1858cc762bd4eed569013d7f00/flag
rm flag.1
rm flag
wget https://mercury.picoctf.net/static/fb851c1858cc762bd4eed569013d7f00/flag
bat flag
cat flag
bat flag
ROT13
Set-ExecutionPolicy Bypass -Scope Process -Force;[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; try { Invoke-Command -ScriptBlock ([ScriptBlock]::Create((Invoke-WebRequest https://www.haskell.org/ghcup/sh/bootstrap-haskell.ps1 -UseBasicParsing))) -ArgumentList $true } catch { Write-Error $_ }
ghcup install cabal latest
python
ende.py
python ende.py
wget https://mercury.picoctf.net/static/1b247b1631eb377d9392bfa4871b2eb1/ende.py
man python
python ende.py
nvim ende.py
lua jit
luajit
luaJIT
z C
z C:/
z c
z msys64\mingw64\bin\
x86_64-mingw64-ghcup-0.1.22.0.exe install
ghci
x86_64-mingw64-ghcup-0.1.22.0.exe
x86_64-mingw64-ghcup-0.1.22.0.exe install cabal
x86_64-mingw64-ghcup-0.1.22.0.exe install hls
x86_64-mingw64-ghcup-0.1.22.0.exe install stack
hx
x86_64-mingw64-ghcup-0.1.22.0.exe install ghc 9.10.1
ghci
z programmes
z OneDrive\Bureau\programmes\
../../
z programmes
ls
ls | grep zoxide
nvim .zoxide.nu
z programmes
nvim $env.profile
nvim $env.PROFILE
nvim $.windows.PROFILE
nvim $.env.USERPROFILE
nvim $env.USERPROFILE
zoxide init
zoxide init nu
zoxide init nushell
z programmes
nvim ./.zoxide.nu
z programmes
zoxide
zoxide -V
where zoxide
where zoxide z
where z
where nvim
which z
which zoxide
winget upgrade zoxide
z programmes
which nu
nvim .cache\starship\init.nu
nvim $nu.config-path
nvim $nu.env-path
starship
which starship
winget -h
winget show starship
winget -v starship
winget search starship
winget list
winget list | grep starship
cargo -h
which nu
z cargo
winget -h
winget uninstall starship
starship
which starship
cargo install starship
nvim $nu.env-path
z programmes
printsqdf
print qsfd
nvim $nu.env-path
z programmes
mkdir haskell
z haskell
z pro
z ha
nvim "hello world.hs"
ghci
nvim "hello world.hs"
ghci `hello world.hs`
ghc `hello world.hs`
ls
rm `hello world.hi`
ghc `hello world.hs`
ls
rm `hello world.hi`
ls
ghc `hello world.hs`
rename
rename `hello world.hs` hello.hs
ls
rm `hello world.hi`
rm `hello world.hs`
nvim hello.hs
ghc `hello world.hs`
ghc hello.hs
ghc -h
ghc -H
ghc --help
z zig
z ../zig
zig
../
z rust
ls
bat hello.rs
z ../cpp
z ../c++
ls
z ../c
../
ls
z hask
ghc hello.hs
ghci
ghc
z hask
ghc hello.hs
z hask
ghc hello.hs
echo a
echo $env.MINGW64
z hask
ghc hello.hs
ghc addLibrarySearchPath
ghc -help
ghc --help
ghc hsc hello.hs
ghc -hsc hello.hs
hsc hello.hs
ghc hsc
ghci hello.hs
nvim hello.hs
ghci hello.hi
ghc hello.hi
z zig
hx hello.zig
hx tutor
hx --tutor
z hask
ghc hello.hs
./hello.exe
ghc
:q
ghci
z hask
C:\Users\Angel\Desktop\ghc-9.10.1-x86_64-unknown-mingw32\bin\ghc.exe hello.hs
C:/Users/Angel/Desktop/ghc-9.10.1-x86_64-unknown-mingw32/bin/ghc.exe hello.hs
z hask
C:/msys64/ucrt64/bin/ghc.exe hello.hs
z msys64
z C:/msys64
mklink /D mingw32 mingw
mklink /D mingw mingw32
z msys
mklink /D mingw mingw32
ls
z hask
C:/msys64/ucrt64/bin/ghc.exe hello.hs
./hello.exe
rm hello.exe
C:/msys64/ucrt64/bin/ghc.exe hello.hs
C:/Users/Angel/Desktop/ghc-9.10.1-x86_64-unknown-mingw32/bin/ghc.exe hello.hs
C:/msys64/ucrt64/bin/ghc.exe hello.hs
rm hello.exe
C:/msys64/ucrt64/bin/ghc.exe hello.hs
rm mingw
ls
ls | grep mingw
hello.exe
rm hello.exe
C:/msys64/ucrt64/bin/ghc.exe hello.hs
hello.exe
ghc
ghci
z hask
rm hello.exe
ghc hello.hs
hello.exe
rm hello.exe
ghci hello.hs
z hask
ghci hello.hs
ghc hello.hs
./hello.exe
ghc hello.hs
./hello.exe
ghc hello.hs
./hello.exe
z starship
ls -r | grep starship
../
/
ls -r | grep starship
ls -R | grep starship
ls -D | grep starship
ls -D
ls --help
ls -ad
ls
ls -a
rm nvim
sudo rm nvim
rm -h
ls -h
ls
ls | grep symlink
grep -h
grep --help
ls | grep symlink
ls | find symlink
find -h
ls -rf
ls -h
man ls
ls -h
ls -a
ls
ls -r
ls -rf
ls -a
ls
ls | find symlink
ls | where type == "symlink"
ls | find symlink
z `Local Settings\`
z `Local Settings`
z `Local Settings/`
cd `Local Settings`
inf
info 
info `Local Settings\`
ls | find local settingzs
ls | find local settings
ls | find local
ls
z nvim
ls
z plugins
z lua\plugins\
ls
rm neovide_backtraces.log
rm old_lsp.7z
ls
nvim zoxide.lua
zoxide
zoxide lua
zoxide query lua
zoxide query nvim
z plugins
ls
nvim plugins.lua
nvim
.\rustlings.exe watch
nvim lsp.lua
nvim
nvim
nvim lsp.lua
nvim plugins.lua
../../
z local_programmes/
z local_programmes
z  c
z ../../mnt
ls
z d
../
z c
z Users/Angel/Documents/local_programmes/
ls
z mach-glfw-vulkan-example-main/
ls
nvim build.zig
nvim init.lua
clear
nvim
z nvim
nvim init.lua
z ..\nvim-data\
ls
rm -rf swap
ls
nvim
z nvim
nvim
nvim init.lua
nvim
nvim init.lua
z .config
ls
sqfdqf
z hask
dkjnsmjkfnqs
rm -h
sqdfq
qsqsdfq
qsdfqsf
z hask
nvim starship.toml
ls
starship
which starship
starship module
starship module powershell
starship module --list
starship module time
starship module username
starship module zig
starship module directory
nu -v
z appdata
z roaming
ls | find starship
../
z local
ls | find starship
../
z .config
ls | find starship
z hask
nvim starship.toml
nu -v
z hask
nvim $nu.env-path
/
/bin
/
/bin
ls | where type == "directory"
ls
../
/hask
./hask
ls
/usr
ls
/local
z local
z share
z bin
z hask
z mach
z cpp
z c++
z gui\sfml\
z sfmlFlappyBird\
z src
../
z include
ls
../../
z hask
../
ls
z rust
../
z latex
../
z c
z nvim
z hask
z nvim
z lua\plugins\
z programmes
z zig
z hask
z rust
z c
z programmes
./c
../
z hask
z nvim
z hask
z nvim
z mach
zig
../
z mach
/
/usr
z hask
/
sudo
root
is-admin
sudo -h
which nu
.config
z nvim
nvim init.lua
z hask
lua
z nvim
z mach
nvim starship.toml
.config
z nvim
z hask
z nvim
z programmes
nvim starship.toml
z nvim
z config
z programmes
z c
../
z mach
ls
../
z renderer
ls
z render
ls
nvim starship.toml
z con
z mach
../
z render
z sfmlFlappyBird
z rust
z sfmlFlappyBird
z hask
nvim starship.toml
qfqsfeq
z hask
ls
z nap
z snap
fzf
ls
ls | find go
rm ansel
ls
cd `My project (1)\`
ls
fish
sudo apt-add-repository ppa:fish-shell/release-3<\n>sudo apt update<\n>sudo apt install fish
ls
chsh
nvim .bashrc
.config
starship -v
starship -version
starship --version
nvim starship.toml
starship --version
where starship
which starship
cargo install starship
apt --help
apt remove starship
sudo apt remove starship
snap --help
snap remove starship
sudo snap remove starship
which starship
starship --version
.config
nvim starship.toml
zoxide
z config
.config
../
z .config
../
z config
z conf
z .config
which zoxide
zig build -h
zig -h
zig build --help
zig --help
z mach
zig build --help
ls
ls -a
../
.z render\
z render\
ls
ls -a
zig build run
nvim build.zig
nvim
node
gcci
gcc
clang
clang -h
clang --help
ghci
neofetch
clear
train
ls
echo 0x12
0x12
12
0xf4
f1
0xff
0x100
0xff
0x100
lua
which lua
winget list | find luia
winget list | find lua
winget upgrade lua
winget upgrade luaforwindows
winget --help
winget upgrade lua
winget show lua
lua
winget show lua
winget install lua
winget install -e --id DEVCOM.Lua
lua
zellij
mach
z mach
z render
z /mnt/c/
ls
z Users/Angel/Documents/local_programmes/
z mach-glfw-vulkan-example-main/
z mach
z mach-glfw-vulkan-example-main/
z mnt/c
z /mnt/c/
ls
quit
exit
tmux
z conf
nvim starship.toml
z mach
z src
../
mv mach-glfw-vulkan-example-main\ glfw-vulkan\
z glfw-vulkan\
ls
zig build run
z local
z local_programmes
z con
z conf
zoxide
z mnt/c/
z /mnt/c/Users/Angel/Documents/local_programmes/
z glfw-vulkan/
ls
zig build run
ls
z conf
sqf
sqdofj
nvim starship.toml
fzf
winget install fzf
fzf
nvim fzf
fzf
fzf -h
fzf | nvim
fzf | code
nvim | fzf
fd
*
z hask
ls
nvim hello.hs
wsl --install --no-distribution
z downloads
clear
wsl --help
wsl -l
wsl -l -v
z mach
z glf
ls
zig build run
zig build run -OReleaseFast
zig build -h
zig build run --release=ReleaseFast
zig build run --release=fast
ls
z shaders
ls
nvim triangle.vert
zig build run --release=fast
nvim triangle.frag
../
363
0xf
z glf
ls
starship --version
ps
ps | find nu
ps | find vim
kill nvim.exe
ps | find vim
kill 18376
kill 18476
kill 18476 /F
kill 18476
ps | find vim
kill 18476
wsl -h
wsl --help
wsl --unregister nixos
nixos -l
wsl -l
ls
z c
../
z pro
z c
ls
nvim hello.c
gcc hello.c
hello.exe
./hello.exe
ls
a.exe
nvim hello.c
gcc hello.c
nvim hello.c
gcc hello.c
a.exe
nvim hello.c
gcc hello.c
nvim hello.c
gcc hello.c
nvim hello.c
gcc hello.c
a.exe
../
z zig
ls
nvim hello.zig
zig run hello.zig
nvim hello.zig
z nvim
ls
nvim init.lua
ps | find vim
ps | find whatsapp
kill 16644
ps | find whatsapp
kill 16644
z glfw
nvim build.zig
zig build run -O ReleaseFast
nvim build.zigzig build run --release=ReleaseFastg
nvim build.zigzig build run --release=ReleaseFast
zig build run --release=ReleaseFast
zig build run --release=fast
zig build run -O ReleaseFast
zig build run -OReleaseFast
zig build run --release=fast
zig build help
zig build -h
zig build -h | find emit
zig build run --release=fast -femit-asm=main.asm --strip src/main.zig
chmod
chmod --help
zig help
z glfw
zig build -h
man stdarg.h
gdb
clea
clear
z down
z conf
nvim sta
z down
z document
z down
z downloads
z music
ls
z pictures
../
z pictures
../
z documents
../
z doc
../
z downloads
ls
../
z Downloads
ls
clear
nvim starship.toml
z down
wget https://artifacts.picoctf.net/c/512/debugger0_a
z down
z c
../../
z mnt/c/
z Users/Angel/
z downloads
gdb
sudo apt install gdb
gdb debugger0_a
zoxide
z downloads
z /mnt/c/Users/Angel/Downloads
ls
lldb
gdb
lldb
z glfw
zig build
ls
./zig-out
ls
./bin
ls
gdb mach-glfw-vulkan-example.pdb
lldb mach-glfw-vulkan-example.pdb
lldb mach-glfw-vulkan-example.exe
gdb mach-glfw-vulkan-example.pdb
gdb mach-glfw-vulkan-example.exe
pdb
z nvim
ls
z init.lua
nvim
z zig
z 
z ~
z OneDrive\Bureau\programmes\zig
ls
zig help
zig build-exe hello.zig
ls
nvim hello.zig
nvim init.lua
zoxide
zoxide edit
zoxide query
zoxide query nvim
z nvim
z /mnt/c/Users/Angel/OneDrive/Bureau/programmes/zig/
ls
rm hello.exe hello.exe.obj
ls
rm hello.pdb
ls
zig build-exe hello.zig
ls
lldb hello
nvim hello.zig
hello
./hello
rm hello
rm hello.o
nvim hello.zig
zig run hello.zig
../c
ls
gcc hello.c
./hello
ls
./a.out
gcc hello.c
./a.out
gcc hello.c
./a.out
nvim hello.c
z c
../
z programmes/c
z progra
z c
gcc hello.c
./a.exe
z c
../
z prog
z c
ls
gcc hello.c
gdb a.exe
z /mnt/c/Users/Angel/OneDrive/Bureau/programmes/c
ls
gdb a.out
z /mnt/c/Users/Angel/OneDrive/Bureau/programmes/zig
ls
zig build-exe hello.zig
ls
gdb hello.o
rm hello.o
zig build-exe help
zig help
zig help build-exe
zig build-exe -g
zig build-exe -d
zig build-exe -OReleaseSafe
zig build-exe -h
zig build-exe -h | find debug
zig build-exe -fno-strip
zig build-exe -fno-strip hello.zig
gdb hello.o
ls
gdb hello
z prog
z c
ls
rm a.exe
clang hello.c
ls
lldb a.exe
ls
rm a.exe
gcc hello.c
gdb a.exe
ls
rm a.exe
rm a.out
ls
../zig
ls
rm hello
rm hello.o
ls
zig run program.zig
nvim program.zig
z downloads
touch grass
ls
ls | find grass
cat grass
rm grass
neofetch
winget install fastfetch
fastfetch
sudo apt install fastfetch
sudo add-apt-repository ppa:zhangsongcui3371/fastfetch<\n>sudo apt update
sudo apt update
sudo apt install fastfetch
fastfetch
fastfetch all
fastfetch -c all
cargo install yazi
yazi
ya
0x4af4b
z rust
ls
touch program.rs
cargo -help
rustc help
rustc -help
rustc --help
rustc program.rs
ls
program.exe
ls
rm program.pdb
rm program.exe
clear
qsdf
sqfd
qsdfqsf
qsfsqdf
sqfqsfqszdfq fqsfsdf
z conf
ls
nvim starship.toml
z conf
nvim starship.toml
nvim program.rs
z zig
z ziglings.org\
ls
zig build
nvim
z zig
ls
zig build-exe program.zig
ls
program.exe
rm program.exe
rm program.exe.obj program.pdb
ls
nvim hello.zig
zig build-exe hello.zig
hello.exe
rm hello.exe hello.exe.obj hello.pdb
ls
z c
z prog
z c
ls
gcc hello.c
ls
a.exe
rm a.exe
ls
z local
git clone https://github.com/bevyengine/bevy
ls
z bevy
ls
git checkout latest
checkout v0.14.0
git checkout v0.14.0
git checkout latest
cargo run --examples breakout
cargo run
cargo run --examples Hello world
cargo run --examples Hello
cargo run --help
z bevy
ls
z examples
ls
cargo run --example hello
cargo run --example hello_world
rustup
rustup update
rustc
rustc -v
rustc -V
cargo run --example hello_world
cargo run --example games
z games
ls
cargo run --example breakout
cargo run --example alien_cake_addict
cargo run --example desk_toy
z examples
ls
z games
ls
cargo run --example stepping
../
ls
cd 3d
ls
cargo run --example game_menu
cargo run --example pbr
cargo run --example wireframe
cargo run --example contributors
cargo run --example desk_toy
../
ls
cargo -h
git -h
git rm bevy
cd beby
cd bevy
git rm bevy
git -h
../
rm -rf bevy
ls
touch bevy
ls
z bevy
ls
z bevy
cd bevy
rm bevy
mkdir bevy
z bevy\
ls
mkdir test
z test
cargo init
../
rm test
mkdir first
z first
cargo init
cargo add bevy
clear
../
rm -rf first
cargo new bevy_test
z bevy_test\
ls
nvim main.rs
nvim Cargo.toml
cargo add bevy
nvim Cargo.toml
nvim main.rs
cargo run
nvim main.rs
cargo
ls
z target\
ls
z debug\
ls
bevy_test.exe
../
ls
rm -rf debug
../
cargo run
z bevy_test
cargo run --features bevy/dynamic_linking
cargo install -f cargo-binutils
rustup component add llvm-tools-preview
ls -a
mkdir .cargo
nvim config.toml
ls
mv config.toml .cargo\
ls
z .cargo\
ls
../
nvim rust-toolchain.toml
cargo run
cargo run --features bevy/dynamic_linking
cargo run
winget install -e --id LMMS.LMMS
z prog
ls
z assembly\
ls
nvi helloWorld.asm
gcc helloWorld.asm
https://stackoverflow.com/question
nasm -f win32 assembly.asm -o test.o
nasm -f win32 helloWorld.asm -o test.o
ld test.o -o asm.exe
nasm -f win32 helloWorld.asm -o test.o
ld test.o -o asm.exe
nvim helloWorld.asm
ls
cat test.o
ld test.o -o asm.exe
ld -h
ld --help
ld test.o -o asm.exe
nasm -h
nasm -f win32 helloWorld.asm -o test.o
rm test.o
nasm -f win32 helloWorld.asm -o test.o
ld test.o -o asm.exe
zig-lld
zig lld
ls
ld test.o -o asm.exe
ld -m win32 -s -o test.o asm.exe
ld -j
ld -h
ld --help
ld -m i386 -s -o test.o asm.exe
ld -m i386pe -s -o test.o asm.exe
ld -m i386pe -s -o asm.exe test.o
touch asm.exe
ld -m i386pe -s -o test.o asm.exe
asm.exer
asm.exe
./asm.exe
ls
rm asm.exe
cat test.o
rm test.o
ls
nasm -f elf64 helloWorld.asm -o test.o
z assem
ls
z bevy
git clone https://github.com/bevyengine/bevy
z bevy
ls
cargo run --example first_person_viewmodel
cargo run --example first_person_view_model
z bevy
cargo install --git https://github.com/rust-mobile/xbuild
x devices
x run --release --device adb:***
z bevy
git clone https://github.com/MalekiRe/bevy_vr_blocks
ls
z bevy_vr_blocks\
ls
x run --release --device adb:***
x devices
x run --release --device adb:"windows x64"
x run --release --device adb:host
x run --release --device adb:windows
x run --release --device adb:x64
rustup target add wasm32-wasi
z local
ls
rustup update
git clone https://github.com/zed-industries/zed
z zed
ls
cargo run --release
z target\release\
ls
zed.exr
zed.exe
z release
zed.exe
zig -h
zig -h | find run
z zig
ls
zig run program.zig
zig run hello.zig
ls
ls -a
cargo -h
ls
zig build run
z glfw
ls
nvim src\main.zig
nvim
clear
z nvim
ls
nvim init.lua
../
cd nvim
nvim init.lua
../
z glfw
nvim
z nvim
nvim init.lua
nvim
nvim init.lua
ls
cd lua
ls
cd plugins
ls
nvim plugins.lua
git help
git commit
git commit -a
git commit -a "oil nvim and removed useless plugins"
git commit -h
git commit -am "oil nvim and removed useless plugins"
git -h
git push
nvim init.lua
cd ../
nvim init.lua
../
z glfw
nvim build.zig
nvim
nvim init.lua
touc lua\plugins\arrow.lua
touch lua\plugins\arrow.lua
nvim lua\plugins\arrow.lua
z glfw
nvim build.zig
z nv
nvim init.lua
git commit -am "switched from harpoon to arrow"
git -h
git add lua\plugins\arrow.lua
git commit -am "added arrow.lua"
git push
winget install -e --id HeroicGamesLauncher.HeroicGamesLauncher
z nu
ls
git commit -am "updated"
git push
../
gcc -h
gcc help
gcc --h
gcc -O --help
z glfw
nvim $env.USERPROFILE
nvim $env.CONFIG
ls
git -h
z glfw
winget install -e --id Alacritty.Alacritty
z appdata
ls
z roaming
ls
z alacritty\
ls
nvim alacritty.toml
nvim src\main.zig
nu -h
winget upgrade pwsh
winget upgrade powershell
ls
z glfw
ls
winget uninstall alacritty
winget install -e --id wez.wezterm
z nvim
nvim init.lua
../
z nvim_minimal\
nvim -h
z minimal
nvim -u init.lua
nvim
$.env.HOME
nvim $env.CONFIG
nvim $env.HOME
echo $env.NVIM_APPNAME
nvim
export-env {$env.NVIM_APPNAME = "nvim"}
nvim
export-env {$env.NVIM_APPNAME = "nvim_minimal"}
nvim
z glfw
nvim src\main.zig
z glfw
nvim src\main.zig
neovide src\main.zig
nvim init.lua
z minimal
nvim init.lua
z nvim
nvim init.lua
nvim init.lua
../
nvim $nu.env-path
z nvim
nvim nvim
nvim init.lua
z glfw
nvim src\main.zig
z nvim
nvim
winget upgrade lua
choco
choco -h
choco upgrade lua
lua -v
7z
winget install -e --id sharkdp.fd
nvim
z nvim
nvim
fd
fd -h
nvim init.lua
nvim
z glfw
nvim lua\plugins\statusline.lua
nvim src\main.zig
nvim
nvim lua\plugins\statusline.lua
nvim lua\plugins\lualine.lua
nvim init.lua
nvim
z glfw
nvim src\main.zig
nvim
nvim src\main.zig
nvim
..\nvim_old\
z nvim
nvim init.lua
mv git.lua lua\plugins\
ls
nvim init.lua
nvim init.lua
z nvim
z glfw
nvim src\main.zig
z old
nvim init.lua
nvim
nvim init.lua
z glfw
nvim src\main.zig
nvim
z old
nvim init.lua
z nvim
z old
nvim init.lua
nvim init.lua
z nvim
nvim
nvim init.lua
z glfw
nvim src\main.zig
z nvim
nvim init.lua
z glfw
nvim src\main.zig
z glfw
nvim src\main.zig
z nvim
nvim init.lua
z rust
ls
nvim hello.rs
nvim program.rs
sed
awk
cut
nvim
nvim %HOME%/.wezterm.lua
cd %HOME%
z $env.HOME
z $env.HOMEPATH
nvim $nu.HOME/.wezterm.lua
nvim $env.HOMEPATH/.wezterm.lua
nvim
fish
cargo -h
nvim .wezterm.lua
nu -v
clear
sdfsq
winget ugrade windowsterminal
winget upgrade windowsterminal
winget list | find term
winget upgrade Microsoft.WindowsTerminal
winget list | find term
winget list | find power
winget upgrade Microsoft.PowerShell
winget upgrade -e -id Microsoft.PowerShell.Preview
winget upgrade -e Microsoft.PowerShell.Preview
winget install -e -id Microsoft.PowerShell.Preview
winget upgrade -e --id Microsoft.PowerShell.Preview
winget install -e --id Microsoft.PowerShell.Preview
qsijdfqsjdfoqdjsf
sdfq
nvim
nu -v
$env.config.shell_integration = true
config nu --default
$env.config.shell_integration
$env.config.shell_integration.osc133 = false
$env.config.shell_integration.ocs7 = false
$env.config.shell_integration.ocs7
$env.config.shell_integration.osc133 = false
yeah
nvim $nu.CONFIG
nvim $env.CONFIG
nvim $env.config
cd $nu.config-path
cd $nu.config
cd $env.Config
nvim $nu.config
nvim $nu.config-path
sfdsdfsdf
sqdfqsdfdsqf
nvim .wezterm.lua
winget install -e --id qutebrowser.qutebrowser
qute
nvim .wezterm.lua
clear
ls
z .cargo
ls
nvim .wezterm.lua
nu -h
fish -e
fish -h
nu -h
wezterm start -- nu
winget list | find wez
winget uninstall wezterm
wezterm
nvim .wezterm.lua
nvim .wezterm.lua
ls
clear
nvim .wezterm.lua
clear
jfd
nvim .wezterm.lua
ls
clear
fastfetch
clear
nvim .wezterm.lua
nvim .wezterm.lua
z glfw
zig build run
nvim src\main.zig
fastfetch
clear
z glfw
clear
nvim src\main.zig
z nvim
nvim
clear
nvim
nvim lua\plugins\dashboard.lua
nvim
nvim lua\plugins\dashboard.lua
nvim
z nvim
nvim
wezterm
~
nvim
nvim .wezterm.lua
nvim lua\plugins\smart-splits.lua
nvim
z glfw
zig build run
nvim src\main.zig
a
nvim .wezterm.lua
z glfw
zig build run
nvim src\main.zig
nvim .wezterm.lua
z glfw
nvim src\main.zig
nvim .wezterm.lua
cd $env.home
clear
z .config
ls
mkdir wezterm
../
mv .wezterm.lua .config\wezterm\
z config
z wezterm
ls
mv .wezterm.lua wezterm.lua
ls
clear
nvim
z glfw
z glfw
clear
nvim src\main.zig
z zig
nvim fast_inverse_sqrt
z c
z prog
z c
nvim hello.c
gcc hello.c
ls
a
nvim hello.c
zig run fast_inverse_sqrt.zig
atoi
to
0x5f3759df
binary
into binary
into
0x5f3759df | into binary
0x5f3759df | into value
0x5f3759df | into bits
5f3759df | into bits
'0x5f3759df' | into bits
zig run fast_inverse_sqrt.zig
z roaming
ls
z nushell\
ls
rm .gitattributes
rm .gitignore
ls
z old
ls
git rm -rf .github\ .gitignore 
ls
rm neovide_backtraces.log
../
z nvim_old\
ls
nvim
rm nvim
../
z .config
ls
cd nvim
ls
../
cd nvim-beginner\
ls
cd nvim
ls
../
rm nvim\ nvim-beginner\
rm -rf nvim\ nvim-beginner\
ls
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/mtoons/.dotfiles.git
git add -h
git add wezterm
git add starship.toml
git add .clang-format
git add deezer-desktop\
git add wandb\
z Roaming
ls
ls | find n
z local
ls
ls | nvim
ls | find nvim
z nvim
ls
z .config
bat nvim\init.lua
nvim init.lua
zig run fast_inverse_sqrt.zig
z nvim
ls
nvim
nvim init.lua
nvim
z glfw
nvim src\main.zig
nvim init.lua
z config
